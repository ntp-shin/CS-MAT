Setting up PyTorch plugin "bias_act_plugin"... Done.
Setting up PyTorch plugin "upfirdn2d_plugin"... Done.
Traceback (most recent call last):
  File "test_code.py", line 6, in <module>
    build_model(network_pkl='/media/nnthao/MAT/saved_model/cmat/00009-CelebA-HQ-img-mirror-celeba512-mat_v1-lr0.001-TwoStageLoss-pr0.1-nopl-kimg600-batch16-tc0.5-sm0.5-ema10-noaug-resumecustom/network-snapshot-000600.pkl')
  File "/media/nnthao/lntuong/FDA/_my_utils.py", line 65, in build_model
    img, img_stg1 = G(img, mask, z_dim, None, return_stg1=True)
  File "/media/nnthao/miniconda3/envs/MAT/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/media/nnthao/lntuong/FDA/networks/mat.py", line 1143, in forward
    img, out_stg1 = self.synthesis(images_in, masks_in, ws, noise_mode=noise_mode, return_stg1=True)
  File "/media/nnthao/miniconda3/envs/MAT/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/media/nnthao/lntuong/FDA/networks/mat.py", line 1076, in forward
    out_stg1 = self.first_stage(images_in, masks_in, ws, noise_mode=noise_mode)
  File "/media/nnthao/miniconda3/envs/MAT/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/media/nnthao/lntuong/FDA/networks/mat.py", line 1004, in forward
    x, x_size, mask = block(x, x_size, mask)
  File "/media/nnthao/miniconda3/envs/MAT/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/media/nnthao/lntuong/FDA/networks/mat.py", line 646, in forward
    x, mask = blk(x, x_size, mask)
  File "/media/nnthao/miniconda3/envs/MAT/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/media/nnthao/lntuong/FDA/networks/mat.py", line 485, in forward
    attn_windows, mask_windows = self.attn(x_windows, mask_windows, mask=self.calculate_mask(x_size).to('cpu' if x.get_device() == -1 else x.get_device()), B=B)  # nW*B, window_size*window_size, C
  File "/media/nnthao/miniconda3/envs/MAT/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/media/nnthao/lntuong/FDA/networks/mat.py", line 280, in forward
    q = self.q(norm_x).reshape(B_, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
  File "/media/nnthao/miniconda3/envs/MAT/lib/python3.8/site-packages/torch/nn/modules/module.py", line 889, in _call_impl
    result = self.forward(*input, **kwargs)
  File "/media/nnthao/lntuong/FDA/networks/basic_module.py", line 49, in forward
    x = x.matmul(w.t())
RuntimeError: mat1 dim 1 must match mat2 dim 0
